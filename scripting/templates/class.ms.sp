#if defined __autogenerated_methodmap_{{classname}}_included
	#endinput
#endif

#define __autogenerated_methodmap_{{classname}}_included

{{#decl_variables}}
any {{var}};
{{/decl_variables}}

/**
 * This is an autogenerated methodmap to access the properties of an in-memory
 * {{classname}} instance.
 */
methodmap {{classname}}{{#inherits}} < {{inherits}}{{/inherits}} {
	/**
	 * Returns the address casted to a {{classname}} methodmap instance.
	 */
	public static {{classname}} FromAddress(Address pInstance) {
		return view_as<{{classname}}>(pInstance);
	}
{{#methods_file}}
	
	#include "{{methods_file}}"
{{/methods_file}}
	
	property Address Address {
		public get() {
			return view_as<Address>(this);
		}
	}
{{#properties}}
	
{{^length}}
	property {{type}} {{name}} {
		public get() {
{{^inline}}
			return view_as<{{type}}>(LoadFromAddress(this.Address + view_as<Address>({{offset}}), {{size}}));
{{/inline}}
{{#inline}}
			return view_as<{{type}}>(this.Address + view_as<Address>({{offset}}));
{{/inline}}
		}
{{#writable}}{{^inline}}
		public set({{type}} value) {
			StoreToAddress(this.Address + view_as<Address>({{offset}}), view_as<any>(value), {{size}});
		}
{{/inline}}{{/writable}}
	}
{{/length}}
{{#length}} {{! This is used for accessing array variables. }}
	public void Get{{name}}({{type}} value[{{length}}]) {
		for (int i; i < {{length}}; i++) {
			value[i] = view_as<{{type}}>(LoadFromAddress(this.Address + view_as<Address>({{offset}} + ({{stride}} * i)), NumberType_Int32));
		}
	}
{{#writable}}
	public void Set{{name}}(const {{type}} value[{{length}}]) {
		for (int i; i < {{length}}; i++) {
			StoreToAddress(this.Address + view_as<Address>({{offset}} + ({{stride}} * i)), view_as<any>(value[i]), NumberType_Int32);
		}
	}
{{/writable}}
{{/length}}
{{/properties}}
{{#size}}
	
	public static int GetClassSize() {
		return {{size}};
	}
{{/size}}
}
